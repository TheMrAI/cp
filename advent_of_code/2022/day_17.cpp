#include <bits/stdc++.h>

using namespace std;
using i6 = int64_t;

template<typename Output, typename Iter>
requires 
    std::derived_from<Output, std::ostream> &&
    std::weakly_incrementable<Iter> && 
    std::indirectly_readable<Iter>
auto dump_to(Output& output, Iter begin, Iter end) {
    while(begin != end) {
        output << *begin;
        if(std::next(begin) != end) {
            output << ' ';
        }
        ++begin;
    }
}

// Source: https://codeforces.com/blog/entry/78852
template<typename T>
requires std::integral<T>
auto ceil2(T a, T b) -> T {
    if (a == 0) return 0;
    return ((a - 1)/b) + 1;
}

const auto shape_a = std::vector<std::string>{
    "####"
};

const auto shape_b = std::vector<std::string>{
    ".#.",
    "###",
    ".#."
};

// this shape is mirrored horizontally 
const auto shape_c = std::vector<std::string>{
    "###",
    "..#",
    "..#"
};

const auto shape_d = std::vector<std::string>{
    "#",
    "#",
    "#",
    "#"
};

const auto shape_e = std::vector<std::string>{
    "##",
    "##",
};

const auto shapes = std::array<std::vector<std::string>, 5>{shape_a, shape_b, shape_c, shape_d, shape_e};
const auto jets = std::string{">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"};
// const auto jets = std::string{">><<<>>>><<>>><<>><>>>><<<><<><>>><<<><<<>>><<>>><<<>>><>>>><<<>>>><<<><<>>><>>>><<>>>><<>>><><>>>><<<>><<<>>>><<>>>><<<>>><<>>><>>><<<>><<<<>><<<<>>>><<<<>>>><<><<<>>>><<><>>>><<><>>><<<><<><>>>><<<>>><>>>><<<>>><<>>>><<<><<<>>><><>><>>>><<>>><<<><>>>><<>><<<>>>><<>><>>><<>><<>>>><<>><<<>><<>>><<>>>><><<>><<<<><<>>><<<<>><>><>>>><<><<<>><<<<>>><>>><<<<>>><><<<>>><<>><>>>><<>>>><<<>>>><<>><<>>>><<<>><<>><<<><<<<>>>><<<><<<><>>><><<<<>>>><><<<<><<<<>><>>><<>><<<<><<<<><<><<<<>><<<<>><<>><<<>><<<>><>><<<>>><<>><<<<>>>><<<<>>><<>>>><<<>><>>>><<<<>>>><<<<>>>><<>><>><<>><<<<>>><<<>>><<<<>>><<<>>>><<>>>><<>>><>><<>><<<><><><<<<>><><<<<>><<>><<>>><<<<>>>><>>><<>>>><<<>>><<<>>><<<><><>>><<<<>>><>>><<<>>><><<>>>><<<<>>>><<<<><>>><<>>>><<<<>><<<>>><><<<<>>><<<>><<>>>><<>>><<<>>><<<>>><<>>><<>>>><<<<>><<><>>><<<<>>><<<>>><>>>><<<>>><<<>>><<<<>>>><<<<>><<<>>>><<<><<<<><<>><<<>>><<<>>>><<<>><<<<>>><<<<><>>>><<<>>><><<<>>>><<><<<><<<<>>>><<>><>>>><<<>>><<<>>><<>>>><>>><><<<<>>>><<<>>><<<<>><>>>><>><>>>><>>>><<<<>>>><<>>><<>><<>><<<><>><<<>>><<>>>><<<>><<><<<<>>>><<<<><><<>>><>><><<>>><<>>>><<><<<>><<<>>><>>>><<<><<>>>><<>>>><<>>><<<>>>><>>><<<<>><<<<><<<<><<<<>><<<<><<<>>>><>><<<>><<><<>><<<>><>><<<<>>><>><<<<>><<<<>>>><<<>><<<<>>>><<<>><<>>>><<<<>>><>>>><<>>>><<<<>>><<>>>><>>><<<<>>>><<<>>><<<><<<>><><>><<<<>>>><<<<>><<<><<<>>>><<>>><<><<>>><<>><<<>>><<<>>><<<>>>><>>>><<<<>>>><<<>><<<<><<<>><<>>><>>><<<<>>><<<>><>>><<<><<<<><<>><<<<><>><<<>><<><<<>>><<<<>>><<<>>><<><>><<<<><><<<<>>>><<>>><<<<>>><>><<<<><<>><<<<>>><<>>><<<<>><<>>><<<<>><>>>><<>><<<<>>>><<>>>><<<<>><<<>><<>>>><<<>>>><>>>><>>>><<<><<>>><<>>><<<<>>><>><><<<<>>>><<<><<<>>><>>><<>><<>>><<>>><<<>>><<<<>><<>>>><<<><<>>>><>><<<>>>><>>>><<<>>><<><<<<>><<<>>><<>>><<<<>>><<<<><<<<>>><<<>>><>>><<>><<<<>>><>><<><<<<>>><<>>><>>><<>>><><<>>>><<<<>>><>>><>>><>><>>><<<<>><<<><<>><<<<>>><>>>><<<<>><<<<><<<<>>>><<>>><<<>>>><<<>><>>><<<<>>><<>>>><<>>><<>>>><>>>><<><<<>>><<<>><<>><<<<>><>>>><<>>>><<><<<>>><>>>><<<<><<<>><>>><<<<>><>><<>>>><<<>><<<>><>>>><><>>>><>>><<<<>>>><<<>>>><<<>>><><<<<><>>><<<<>>>><<<><<><<<><<>>>><><>>>><<<<>><<<<>>><><><<<>><<>>>><<<><<<<>>><<<<><<<<>>><<<>>><<><<>>><<<>>><<<>>><<>>><<>><>><<<<>>><<<>>><<<>>><>>><<>><<>>><<<<>>>><<><<>>>><<><<<<>>><<<><<<>>><><<<>>><<>>><<<>>>><<<<>>>><><<>>><<<>>>><<<>>>><<><<>>>><<<>><<>><<>>>><<>><<<><><<<><>>><><>>><<>>>><<<>><>>><>><>>>><<<<>>><>>><>><<<><<>>>><<<>>>><<><><<<>><<>><<<><<<><<><<<<>>><>><<<<>>><<<>>><<>>><<>>><<><<<<>>>><<>>><>><<<<>><<>>><>><<>><<<><>>><<><<<>>>><<<><>>>><<<<>><<<<><>><>><><<<>><<<>>>><><<<><<>><<>><>>><<<>>>><<>><<<<>>>><>>>><<>><<<>><<<>><<<<><<<<>>><<>>>><<<<>><<>>>><<<<>>><<<>><<>><<>><<<<><>>>><<<<><<<<>>><<<>><<>><<<>><><><<<<><<>><<><<<<>>><<>><<<>>><<<<><<>><>><<<><>>><>>><>><<>>>><<<<>>>><<<<><<<>>>><<<>><>>>><>>>><>>><<>>>><<<<>><<<>>><<<<>>><<>>><>>>><<<<>>><<<<>>>><<><<>><>>>><<><>>>><>>><<<><<>>><<<<>>>><>><<<<><<<<><>>><><<<<>>><>>><<<>>>><<>>>><<><<<>>><<<>><<>>><>><>>><<>>><<<<>>>><<<>><><<<<>>><<<<>><<>>>><<>>>><>>><<<>>>><<<>>>><<>>><<>><<<>>>><<<<>><<>>>><<<>>>><>>><<>>><<>><<<>>>><<>><><>><<<><<<>>><>>>><<><><<<<>><>>><<<<>><<<><>>>><>>>><<><<<<>>>><>>>><>><<<<>>>><<>><<<<><<<><<<<><<>><>><>>><>><<>><<<>><<<<><<<>>>><<<<>><<><<<<>>>><<<>>><<>>>><<>><<<<><<<<>>>><<<>><<<>>>><<>>><>>>><<><<>>>><<<><>>><>>><<<>>><<<><<>>><<>>><><>>>><<<>>><<<>>>><<<<>><><<<>>><<>><<<<>>>><<>>><<<<><>><<<<>>>><<<<>>>><><>>>><>><>>><<<<><><<<>>>><<<<>><>>><<<<>>>><<>>>><<<<>><>>><<>><<>><>>>><<<><<<<>>><<<><<>>>><<>><<<>><<<<>><<<>>>><>>>><<>>><<<>><<>><<<>>>><<<>><>>>><>><<<>>>><>><<>>>><>>>><<<>>>><<<<>>>><<<><>><<<<>>>><>>>><<>><<<>><<><<<<>>>><<<<>>><<>>><<<<>><<<>><<<><<<><<<<>><<<<>>>><<>>><>>><>>>><<<>>>><<<>>><<<>>>><<>>><<<>>><>><<>>>><<<>>>><<>><<<<><<><<><<>><>>><<<<>>><<<<>>>><<<>>>><<>>><<<>>>><<<>><<>>><>>><<<<><<<<>>>><<<>>>><><<<<>>><>><<><<>><<<>>><<<<><>><<<>><>><<<<>><<<><<><<<<>>>><<>>>><<<<>>><<<<><<><<<><<<<>><<<<>>>><<<<>><<<>>><<><<>><<<>><<<>>><>>>><<>>><<<><<<<><><<<>><<<<>>><<<><>>>><>><>><<<>><>>>><>>>><>>>><<>><<<<><<<>><<<>>><<<<>>><<<>>>><<<>><><<<>><><<<<>><<<<>>><<<><<<>>><<><<>>>><>><<<><<<>><>><<<<><<>>>><>>><<<<>>>><<<>><<>>>><>>><<<<>>><<>>><<<<>><<><<><<<>>>><<<><<<<>><>>>><<<<>><>><<<>><<<>>><<<<>><>>>><<<<>><<>><<<<>>><<<<><<<<>><>><<<>>>><<<>>>><<<>>>><>>>><<<>>>><<>><<><>>><<<<>>><<<<>>>><>><<<<><<<<>>><>><<<<>>>><<<>>>><<>>><>><<><<<><<<><><<<<>>>><<<>>><<<<>>>><<>><<<>>>><<><>>><<<>><>><<<><>><<>><><<<><<><>>>><<<<>>>><>><<>><><<<>><<<>>><<>>>><<<<>><<<<><>>><>>>><<<<>>><<<<>>><<>><<>><>>>><<<>>>><<<>><<><<<<>><>>>><<<<>>>><<><<<><<<<><>><<<>><<<>>><<>><<<<>>><<<<>><<><>>>><<<>>>><<<>>>><>><<<<>>><<>><<<><<>>><<>><<<<>>><<<<>>>><<<>><<<<>><<>>>><<>>>><<<>>>><><<>>>><<<<>><<><>>>><><<<>>>><<>>><<>>><<>><<<><><>>>><><<><<<<>>>><>><<<<>>>><<<>><<<<>>>><><<<>>>><<<>><<<<>>>><>><><<<<>>>><<<>>><<<>><<<<>>>><<<>>><<<>>><<<>>>><<<><<<>>><<<>><<<>>><>>>><<<<>><><<<><<><><<<><<<>><<>><>>><>>>><<><<<><<<<><><<>>><<>>>><<>><>><<>>>><<<>><<>>>><<<><<>><><<<<>><<<<>>>><<>>>><<<>>>><>>>><<><<<>>>><<<>>>><<<<>><<>>>><<<<><<<<>>>><<<<>>>><<<>><<>>><<<>><<<><<>>>><<<<>><<<<><<><>>><<<>><<><>>>><<<<>>>><>>>><<><<<>>><<<<><<>><<<<>>>><<<><>><<>>><>>>><<><<>>><><<<><<<<>>>><><<<<>>><<>><<<>>>><><<<<><<<<>>>><>><<><<<>>><<<><>>><<<>>><<<<>><<<>>><<<>>><<<>>>><<<>>>><<<<><>>>><<>>><><<<<><<<><>><<<><<<><><<<>><<<>>>><<<<>><<>>>><<<<>>><<<>><<<>>><<<<>>><<>>><<>>>><<>>><<<><>>>><<>>>><>>><<>>>><>><<<>><<>>><<>><<<><<<<>><<<>>><<<<>><<<<><><<<<>>>><>>>><><>><<<>>>><<><<<><<><>><<>><<><<<>><>>><<>>>><<>>>><<>>><<<>>><<>>>><<<>><<<<>>><<>><>>><<<<>>>><<>><<<<><<<<><>><>>>><>>><<<<>>>><<<<>>><<<>><><<>>>><<>><>>>><<<><>>>><<>>>><<>>><>>><>>><<><><<<>><<>>><<>>><<>><<<><>>><<<>>>><<>>><>><<>>><><<<>>>><<>>>><>>><<<<>><><<<<><<<<>><<<>>><<>><>>>><<>>><<<>>><<<<>><<<>>>><<<>>>><<<>>>><<><>>><<>>>><<<>>>><<<<><<<<>>>><<>>>><<<>>><<<<>>>><<<<>><<<<>><<<<><><<<>>>><<>><<<>>>><>><>>>><<>>>><<<>><>><<<<><>><<>>><<>>><<<<>>>><<<><><><<>>>><<<<>><<<<>><><<><<<>>><<<>><<<<>><<<><<<>>>><<<><<<>>>><<><<<>><<<<>>><<<>>>><><<<>>><>>>><>>><<>>><>>>><><>>><<<<><><<>><>>>><<<><<<>>>><<<<>>>><<>>><>><<<><<><<<>>><<>><<<>>>><<<<>><<<>>><<<>>>><>><>><>><><<<>><<>>><<<>><>><>>><<<>><><<<>>>><<><><<<<><<>><<<><>><<<<>>>><<<>>><<>>>><<<>>>><<<><<>>>><<<<>>>><<<>><<<<>>>><<><<>>><<>>>><>><>><<<<><>>><>>>><<>><>>>><<>>><<>>><<>>><>><>>>><<<>>>><<>>>><<<>><<>><<>>>><<>>><<<<><<><<<<><<>><<<<>>>><<<>><><><><>>><<<<>><><<<<>>>><>>>><<>>><<<<><<><<>><><<>>>><<<>>><<<<>>>><<<>><<<<>><<<>><>>>><<<><>>>><>>>><<<<>><>>>><<<>>>><>>>><<<<><>><>>>><<<<>>><>><<<>>>><<<><<<><<<<>>><<<>><>><>>>><<<>><<<>>>><<>>>><<>>>><<><<><<>><>><>><<<>>>><<><<<<>>><>>><>><<>><<<>>>><>>>><<<<>><><<>>><<><>>><>>><<>>><<<<><<<>>>><<<<>>>><<<><>>><<>>>><>>>><<<<>><><<><<<<>><<>><>>>><<<<><<<><>><<<<>><<>><<<<>><><<<<>><<<<><<<<><<><<<><>>>><<>>>><<<<>>><>>>><<>><><<>>>><>>>><<<>>><<<>>><<><<>>>><<>>>><<<>><<<><<<<>>><<>>>><<>>>><><<>>><<<><<<><<><<<<>>><<<<>><<<><<<>>>><>><<>><<<><<<>>>><<><<<<>>><<<<>>><<<<>><<<>>><>>><<>>><<<<>><<<<><<<>><<<>><<<<>>><<<<>>>><<><>>><<<<>><<<>><<>>>><><>>><>><<><<<<>><<<<>>><<>>><<<<><<>>>><<<<><><<>><<<>><<>>><<<<><<<><>><>><>>><<<>><><>>>><<<><<<<>>>><>><<<<>><<<<>><><>><>>><<<<>>>><<>><<>>>><<<>>><<<><<<>>><>>>><<<>>><<<>>><<<>>>><<<>>>><>>>><<>><<<<><>><<<>><<<<>>><>>><>><>>><>>>><<<<>>>><>><<<<>>>><>><<>>><<><<><><<<><><<<>><<>>>><<><<<><<<<>>><<<><<<<>><<<<>>><<><<>>><<<><>>><<><<<<>><<<<>>><>>>><<>>><<><><<><>>>><<><<<>>>><<>>><<<<>>>><>>><<<<>>>><<>>>><<>>><<<>><>><<><>><<<<>>>><<<<>>><<><>>><<<<>>><>>><<<>>><<<<>>>><<<>><<>><<><<<<>>><<<><><<<>>><<<>>><<>>>><<>>>><<>>><<<<><<<<><><<>><><<<<>>>><<<>>>><<>><<<<><<<<>><><<<<>>><>><<<<>>>><<<<><>><<<>><<>>><><>>><<>><<<>>><<<<>><<<>>><<>><<>>>><<<<>>>><<>><>><<<>>><<<>>>><<<>>>><<<<>>><<><<><<<<>><<<>>><><<<<>>><>><<>>>><<<<>>>><<<<><<><<>><>>><<><<<>>>><<<><><><<>><>>><<<<><<<<>>><<><<>><>><<<>>>><<<>>>><<><<<>>><>>><<>><<>><<<>>>><<>><<<<>><<<<>><<<<>><<<>>><<><<<<>>><<<<><<<<>>><>>><<<<>><<<<>>>><<>>>><<>>>><><<<><<<<>>><<<>>><<<<>>>><<>>><<>>><<<<>><<<<><<<<><<>>>><<<<>>>><><<<>>><<>><><>>><<<>>><<<><>>><>><<>>>><>>>><>>>><<<<>>><<<>>><>>><>>><<<><>><<<<>>><<>>><>>><<<>>><<>>><>><>><<>><<<>><<<>>>><<<<>><<<><<<>>>><>><>><<<>>>><<<>>><<>>><><<<<><<<<>>>><<<<>>>><><>><>><<<>><<<>><<<<>>>><<>><<<<>>><><<<>><>>>><<>>><<<<>>>><<>><<<<>><>>>><<<<><<<>><<<>>><<<<>><><<<<>>><><<>>>><<<><>>><<<<>>>><<<>><<<<>>>><<<<>>><<>><<<<>><<<<>><<>>>><><<>>>><><<<>>>><<<>>><<<<><<<>><>>><>>><<<>>>><<>>><<<<>><<>>><><<<>><><<<>>>><<<><>><<>>><<<<>><<<>>>><<>>>><<<<>>>><<>><<>>><<<>>><<<>>><>><>>>><<<<>>><<><><<<>>><<<<>>><>>><<<>><<>>>><<<<>><><<<>><<>>><<><>>><<<><<<<>><>><<<>>>><<>>>><>>><>>><<<<>>>><<<<>>><>><><<><<>><>>>><>>><<<<><<>>><<<<>>>><<<>>><<<>><<<<>>>><<>>>><><<><>>><<>>>><<>>><<<>>>><<><<>>>><<<<>>>><>>>><>><<>>><<<>>>><><<>><<><<<<>>><<<>>><<<<>><<>><<<>>>><<<>>>><<<<>>><<<><<<>>><<><<<>>><<<>>>><<<<>><>><<>>><<>>>><<<>>>><<<>>>><>>><<><>>>><>>><<<><<<<><><<<<>>><<<>><<<<>>><><<>><<<<>><>>><>><<<<>>>><><<>><<>>><<<<>><<<><<<>>>><<<>>><<<<><><<<<>>>><>><<><<<<><>><<><<<<>>><<<>>>><<>>>><<<<><<<>>><<<<>>>><<<<><<>>><<<<>>><<<<><<<>><<><<<<><<>>>><><<<<>>>><<<>><>>>><>>><<<<>><><<<<>><<<><<>><<<>>>><<><<><<<><<>>>><<<<>>><<<>>><<<<><<<>>>><<<<>><>><<>>>><>>><<<<><<<<>>>><<<<>>><>>>><<<><<<<>>><>>>><>><<><>><<<<>>><<<>>><<<<><<<<>>><<<><<>>><<<<>>><><<<<><<>><>>><<<<>>><><<<>>>><<<<><<<>><<<<>>><>>>><>><<>><<<<><><>>><<>><>>><<>>>><<<>>><<>>>><<<>><<<<>>><>><<>><<<>>><<<>>>><<<<>>><<<>>><>>>><<>><<<<>>>><<>>>><><>>>><<<><<<>>>><<><>>>><<<<>><>>><<<><><<<<><><<<<>>>><<>><<<>>>><>>>><>>><>>><<<><<<>><>>><>>>><<<<>><<<<><<>>><<<><<<<>><<<<><<<<>><<>><<<><>><<<><><<>><<>>><><<>><>>><>>>><>>>><<<>><<>>><>>><<<<>><<<<>>>><<>>><<<>><<>>><<<><<>><<>>><<><<<<><<<>>><<<<>>><<<<><>>>><>><<<>>>><>>>><<<>>>><<<<>>>><<>>>><>>>><><<>><<<<>>><><<><<<><<<<>>>><<<<>>><<<<>>><>>>><<><<<><<>>><<>>><<<<>>>><><<><>>>><<<<>>>><>>><<<<>>><>><<<<>>><>><<<>>>><<<><>><<<>>><<<>><<<<><<>>><<<>><><<<<>>>><<<>>>><<>>><<>>>><<<<>><<<><<>><<>><><<><><<<<>>>><>>"};

auto can_move_left(std::vector<std::string> const& tower, std::vector<std::string> const& shape, size_t shape_pos_y, size_t shape_pos_x) -> bool {
    // can't move left if next to the shape we would get out of bounds
    if (int64_t(shape_pos_x) - 1 <= -1) {
        return false;
    }

    for (auto y_offset = size_t{0}; y_offset < shape.size(); ++y_offset) {
        auto x_offset = size_t{0};
        for (; x_offset < shape[0].size(); ++x_offset) {
            if (shape[y_offset][x_offset] == '#') {
                break;
            }
        }
        auto y = shape_pos_y + y_offset;
        auto x = int64_t(shape_pos_x + x_offset);
        if (x - 1 <= -1 || tower[y][x-1] == '#') {
            return false;
        }
    }
    return true;
}

auto can_move_right(std::vector<std::string> const& tower, std::vector<std::string> const& shape, size_t shape_pos_y, size_t shape_pos_x) -> bool {
    // can't move right if next to the shape we would get out of bounds
    if (shape_pos_x + 1 >= tower[0].size()) {
        return false;
    }

    for (auto y_offset = size_t{0}; y_offset < shape.size(); ++y_offset) {
        auto x_offset = static_cast<int>(shape[0].size());
        for (; x_offset >= 0; --x_offset) {
            if (shape[y_offset][x_offset] == '#') {
                break;
            }
        }
        auto y = shape_pos_y + y_offset;
        auto x = shape_pos_x + x_offset;
        if (x + 1 >= tower[0].size() || tower[y][x+1] == '#') {
            return false;
        }
    }
    return true;
}

auto can_move_down(std::vector<std::string> const& tower, std::vector<std::string> const& shape, size_t shape_pos_y, size_t shape_pos_x) -> bool {
    if (int64_t(shape_pos_y) - 1 <= -1) {
        return false;
    }
    
    for (auto x_offset = size_t{0}; x_offset < shape[0].size(); ++x_offset) {
        auto y_offset = size_t{0};
        for (; y_offset < shape.size(); ++y_offset) {
            if (shape[y_offset][x_offset] == '#') {
                break;
            }
        }
        auto y = int64_t(shape_pos_y + y_offset);
        auto x = shape_pos_x + x_offset;
        if (y - 1 <= -1 || tower[y-1][x] == '#') {
            return false;
        }
    }
    return true;
}

auto delete_shape(std::vector<std::string>& tower, std::vector<std::string> const& shape, size_t shape_pos_y, size_t shape_pos_x) {
    for(auto y = shape_pos_y; y < shape_pos_y + shape.size(); ++y) {
        for (auto x = shape_pos_x; x < shape_pos_x + shape[0].size(); ++x) {
            if (shape[y-shape_pos_y][x-shape_pos_x] == '#') {
                tower[y][x] = '.';
            }
        }
    }
}

auto insert_shape(std::vector<std::string>& tower, std::vector<std::string> const& shape,  size_t shape_pos_y, size_t shape_pos_x) {
    for(auto y = shape_pos_y; y < shape_pos_y + shape.size(); ++y) {
        for (auto x = shape_pos_x; x < shape_pos_x + shape[0].size(); ++x) {
            if (shape[y-shape_pos_y][x-shape_pos_x] == '#') {
                tower[y][x] = '#';
            }
        }
    }
}

auto move_left(std::vector<std::string>& tower, std::vector<std::string> const& shape, size_t shape_pos_y, size_t shape_pos_x) {
    delete_shape(tower, shape, shape_pos_y, shape_pos_x);
    insert_shape(tower, shape, shape_pos_y, shape_pos_x-1);
}

auto move_right(std::vector<std::string>& tower, std::vector<std::string> const& shape, size_t shape_pos_y, size_t shape_pos_x) {
    delete_shape(tower, shape, shape_pos_y, shape_pos_x);
    insert_shape(tower, shape, shape_pos_y, shape_pos_x+1);
}

auto move_down(std::vector<std::string>& tower, std::vector<std::string> const& shape, size_t shape_pos_y, size_t shape_pos_x) {
    delete_shape(tower, shape, shape_pos_y, shape_pos_x);
    insert_shape(tower, shape, shape_pos_y - 1, shape_pos_x);
}

auto print_dir(size_t jet_index) {
    std::cout << jets << std::endl;
    for(auto i = size_t{0}; i < jets.size(); ++i) {
        if (i == jet_index) {
            std::cout << '|';
            continue;
        }
        std::cout << ' ';
    }
    std::cout << std::endl;
}

auto print_tower(std::vector<std::string> const& tower, unsigned sleep_for_millis) {
    for(auto it = tower.crbegin(); it != tower.crend(); ++it) {
        std::cout << '|' << *it << '|' << std::endl;
    }
    std::cout << std::string("+-------+") << std::endl << std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(sleep_for_millis));
}

constexpr auto spawn_in_distance_left = 2;
constexpr auto spawn_in_distance_bottom = 3;

auto main() -> int {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    auto tower = std::vector<std::string>{
        ".......",
        ".......",
        "......."
    };
    auto shape_count = size_t{0};
    constexpr auto max_shape_count = size_t{1000000000000};

    auto jet_index = unsigned{0};
    auto shape_index = unsigned{0};
    auto shape_pos_y = tower.size();
    auto shape_pos_x = size_t{spawn_in_distance_left};
    auto highest_y = size_t(0);
    while (shape_count < max_shape_count) {
        // add the new shape
        while (tower.size() < (shape_pos_y + shapes[shape_index].size())) {
            tower.emplace_back(".......");
        }
        insert_shape(tower, shapes[shape_index], shape_pos_y, shape_pos_x);
        // std::cout << "Initial" << std::endl;
        // print_tower(tower, 1000);

        // move shape
        while(true) {
            auto should_move_left = true;
            if (jets[jet_index] == '>') {
                should_move_left = false;
            }

            if (should_move_left) {
                // print_dir(jet_index);
                if (can_move_left(tower, shapes[shape_index], shape_pos_y, shape_pos_x)) {
                    move_left(tower, shapes[shape_index], shape_pos_y, shape_pos_x);
                    --shape_pos_x;
                }
            } else {
                // print_dir(jet_index);
                if (can_move_right(tower, shapes[shape_index], shape_pos_y, shape_pos_x)) {
                    move_right(tower, shapes[shape_index], shape_pos_y, shape_pos_x);
                    ++shape_pos_x;
                }
            }
            jet_index = (jet_index + 1) % jets.size();
            
            if (!can_move_down(tower, shapes[shape_index], shape_pos_y, shape_pos_x)) {
                // std::cout << "Moving" << std::endl;
                // print_tower(tower, 300);
                break;
            }
            move_down(tower, shapes[shape_index], shape_pos_y, shape_pos_x);
            --shape_pos_y;

            // std::cout << "Moving" << std::endl;
            // print_tower(tower, 300);
        }

        // restore shape spawn in position
        shape_pos_x = size_t{spawn_in_distance_left};
        highest_y = std::max(highest_y, shape_pos_y + shapes[shape_index].size());
        shape_pos_y = highest_y + spawn_in_distance_bottom;

        shape_index = (shape_index + 1) % shapes.size();
        ++shape_count;
    }

    auto top = std::find_if(tower.crbegin(), tower.crend(), [](auto const& val) { 
        return val != std::string(".......");
    });
    std::cout <<  tower.size() << std::endl;
    std::cout << std::distance(tower.crbegin(), top) << std::endl;
    std::cout << "Height of the tower is: " << tower.size() - std::distance(tower.crbegin(), top) << std::endl;

    return 0;
}
